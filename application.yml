# COMMON APPLICATION PROPERTIES
# See Azure KeyVault config doc at https://microsoft.github.io/spring-cloud-azure/docs/4.0.0-beta.2/reference/html/index.html#basic-usage-3

server:
  # start services on random port by default
  port: 0
  # The stop processing uses a timeout which provides a grace period during which existing requests will be allowed to complete but no new requests will be permitted
  shutdown: graceful

# embedded database init, supports mysql too trough the 'mysql' spring profile
spring:
  datasource:
    schema: classpath*:db/hsqldb/schema.sql
    data: classpath*:db/hsqldb/data.sql
  sleuth:
    sampler:
      probability: 1.0
  cloud:
    config:
      # Allow the microservices to override the remote properties with their own System properties or config file
      allow-override: true
      # Override configuration with any local property source
      override-none: true
      auto-refresh: true
      refresh-interval: 60
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none # create-drop
    # https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.data-initialization.using-basic-sql-scripts
    # https://stackoverflow.com/questions/28042426/spring-boot-error-creating-bean-with-name-datasource-defined-in-class-path-r
    # https://www.baeldung.com/spring-boot-data-sql-and-schema-sql
    defer-datasource-initialization: true
    # https://facingissuesonit.com/2019/07/15/org-hibernate-hibernateexception-access-to-dialectresolutioninfo-cannot-be-null-when-hibernate-dialect-not-set
    # database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    # database-platform: org.hibernate.dialect.MySQLDialect
    database: mysql

# Spring Boot 1.5 makes actuator secure by default
management.security.enabled: false
# Enable all Actuators and not only the two available by default /health and /info starting Spring Boot 2.0
management.endpoints.web.exposure.include: "*"

# Temporary hack required by the Spring Boot 2 / Spring Cloud Finchley branch
# Waiting issue https://github.com/spring-projects/spring-boot/issues/13042
spring.cloud.refresh.refreshable: false


# Logging
logging.level.org.springframework: INFO
logging.level.org.springframework.web: debug
logging.level.org.hibernate: debug
logging.level.com.mysql: debug
logging.level.org.springframework.jdbc.datasource: debug
logging.level.org.springframework.boot.sql.init: debug
logging.level.org.springframework.boot.autoconfigure.jdbc: debug
logging.level.com.zaxxer.hikari.HikariDataSource: debug
logging.level.com.zaxxer.hikari.pool.PoolBase: debug

logging.level.org.springframework.boot.jdbc.init.dependency.DataSourceInitializerDetector: debug
logging.level.org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializerDetector: debug
logging.level.org.springframework.boot.orm.jpa.JpaDataSourceInitializerDetector: debug

logging.level.o.s.b.context.config.ConfigDataLoader: debug
logging.level.org.springframework.boot.context.config.ConfigDataLoader: debug
logging.level.org.springframework.boot.context.config: debug

logging.level.org.springframework.boot.env.PropertySourceLoader: debug
logging.level.org.springframework.boot.env.PropertiesPropertySourceLoader: debug
logging.level.org.springframework.boot.env.YamlPropertySourceLoader: debug

logging.level.org.springframework.context.ApplicationContextInitializer: debug
logging.level.org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer: debug
logging.level.org.springframework.boot.context.ContextIdApplicationContextInitializer: debug


# Metrics
management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      prometheus:
        enabled: true

# Chaos Engineering
---
spring:
  config:
    activate:
      on-profile: chaos-monkey      
management.endpoint.chaosmonkey.enabled: true
chaos:
  monkey:
    enabled: true
    watcher:
      component: false
      controller: false
      repository: false
      rest-controller: false
      service: false

---
spring:
  config:
    activate:
      on-profile: mysql
  datasource:
    schema: classpath*:db/mysql/schema.sql
    data: classpath*:db/mysql/data.sql
    # url: jdbc:mysql://localhost:3306/petclinic?useSSL=false
    # url: jdbc:mysql://petcliaro-mysql-server.mysql.database.azure.com:3306/petclinic?useSSL=true
    # https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-using-ssl.html
    # url: jdbc:mysql://petclinic-mysql-server.mysql.database.azure.com:3306/petclinic?useSSL=true&requireSSL=true&enabledTLSProtocols=TLSv1.2&verifyServerCertificate=true
    url: jdbc:mysql://${MYSQL_SERVER_FULL_NAME}:3306/${MYSQL_DATABASE_NAME}?useSSL=true&requireSSL=true&enabledTLSProtocols=TLSv1.2&verifyServerCertificate=true
    username: ${MYSQL_SERVER_ADMIN_LOGIN_NAME}
    password: ${MYSQL_SERVER_ADMIN_PASSWORD}
    initialization-mode: NEVER # ALWAYS
    # https://javabydeveloper.com/spring-boot-loading-initial-data/
    platform: mysql
    #driver-class-name: com.mysql.jdbc.Driver
---
# https://github.com/Azure/azure-sdk-for-java/issues/28128
# https://microsoft.github.io/spring-cloud-azure/docs/4.0.0-beta.2/reference/html/index.html#one-property-source
# spring:
#  cloud:
#    azure:
#      profile:
#        tenant-id: ${AZURE_TENANT_ID}
#      credential:
#        client-id: ${AZURE_CLIENT_ID}
#        client-secret: ${AZURE_CLIENT_SECRET}
#      keyvault:
#        secret:
#          property-source-enabled: true
#          endpoint: ${AZURE_KEYVAULT_ENDPOINT}
          
spring:
  cloud:
    azure:
      keyvault:
        secret:
          property-sources:
            - credential:
                client-id: ${AZURE_CLIENT_ID}
                client-secret: ${AZURE_CLIENT_SECRET}
              endpoint: ${ENDPOINT}
              profile:
                tenant-id: ${AZURE_TENANT_ID}
                
